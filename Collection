Collection是最基本的集合接口，声明了适用于java集合(Set和list)的通用方法。
Set和List都继承了Collection，Map没有
Collection接口的方法：
boolean add(object o):向集合中加入一个对象的引用
void clear() :删除集合中所有的对象,即不再持有这些对象的引用
boolean isEmpty() : 判断集合是否为空
boolean contains(Object o):判断集合中是否持有特定的对象的引用
Iterator iterator(): 返回一个iterator 对象，可以用来遍历集合中的元素
boolean remove(Object o):从集合中删除一个对象的引用
int size():返回集合中元素的数目
Object[] toArray():返回一个数组，该数组中包括集合中的所有元素
关于：Iterator() 和toArray() 方法都用于集合的所有的元素，前者返回一个Iterator对象，后者返回一个

Iterator接口声明了如下方法：
hasNext(): 判断集合中元素是否遍历完毕，如果没有，就返回true
next()       :返回下一个元素
remove():从集合中删除上一个有next()方法返回的元素。

Set(集合)：
Set是最简单的一种集合。集合中的对象不按特定的方式排序，并且没有重复对象。
Set接口主要实现了两个实现类：
　HashSet : HashSet类按照哈希算法来存取集合中的对象，存取速度比较快
　TreeSet : TreeSet类实现了SortedSet接口，能够对集合中的对象进行排序。
Set 的用法：
存放的是对象的引用，没有重复对象

　List(列表)：
List的特征是其元素以线性方式存储，集合中可以存放重复对象。
List接口主要实现类包括：
ArrayList() : 代表长度可以改变得数组。可以对元素进行随机的访问，向ArrayList()中插入与与删除元素的速度慢。
LinkedList(): 在实现中采用链表数据结构。插入和删除速度快，访问速度慢。

Map(映射):
Map 是一种把键对象和值对象映射的集合，它的每一个元素都包含一对键对象和值对象。
Map没有继承于Collection接口，从Map集合中检索元素时，只要给出键对象，就会返回对应的值对象。

List的功能方法
　　实际上有两种List: 一种是基本的ArrayList,其优点在于随机访问元素，另一种是更强大的LinkedList,它并不是为快速随机访问设计的，而是具有一套更通用的方法。
　
	　List : 次序是List最重要的特点：它保证维护元素特定的顺序。List为Collection添加了许多方法，使得能够向List中间插入与移除元素(这只推荐LinkedList使用。)一个List可以生成ListIterator,使用它可以从两个方向遍历List,也可以从List中间插入和移除元素。
　　
	ArrayList : 由数组实现的List。允许对元素进行快速随机访问，但是向List中间插入与移除元素的速度很慢。ListIterator只应该用来由后向前遍历ArrayList,而不是用来插入和移除元素。因为那比LinkedList开销要大很多。
　　
	LinkedList : 对顺序访问进行了优化，向List中间插入与删除的开销并不大。随机访问则相对较慢。(使用ArrayList代替。)还具有下列方法：addFirst(), addLast(), getFirst(), getLast(), removeFirst() 和 removeLast(), 这些方法 (没有在任何接口或基类中定义过)使得LinkedList可以当作堆栈、队列和双向队列使用。

Set的功能方法
	Set具有与Collection完全一样的接口，因此没有任何额外的功能，不像前面有两个不同的List。实际上Set就是Collection,只是行为不同。(这是继承与多态思想的典型应用：表现不同的行为。)Set不保存重复的元素(至于如何判断元素相同则较为负责)
　　
	Set : 存入Set的每个元素都必须是唯一的，因为Set不保存重复元素。加入Set的元素必须定义equals()方法以确保对象的唯一性。Set与Collection有完全一样的接口。Set接口不保证维护元素的次序。
　　
	HashSet : 为快速查找设计的Set。存入HashSet的对象必须定义hashCode()。
　　
	TreeSet : 保存次序的Set, 底层为树结构。使用它可以从Set中提取有序的序列。
　　
	LinkedHashSet : 具有HashSet的查询速度，且内部使用链表维护元素的顺序(插入的次序)。于是在使用迭代器遍历Set时，结果会按元素插入的次序显示。

Map的功能方法
　HashMap就是使用对象的hashCode()进行快速查询的。此方法能够显着提高性能。
	
	Map : 维护“键值对”的关联性，使你可以通过“键”查找“值”

　　HashMap : Map基于散列表的实现。插入和查询“键值对”的开销是固定的。可以通过构造器设置容量capacity和负载因子load factor，以调整容器的性能。

　　LinkedHashMap : 类似于HashMap，但是迭代遍历它时，取得“键值对”的顺序是其插入次序，或者是最近最少使用(LRU)的次序。只比HashMap慢一点。而在迭代访问时发而更快，因为它使用链表维护内部次序。

　　TreeMap : 基于红黑树数据结构的实现。查看“键”或“键值对”时，它们会被排序(次序由Comparabel或Comparator决定)。TreeMap的特点在于，你得到的结果是经过排序的。TreeMap是唯一的带有subMap()方法的Map，它可以返回一个子树。

　　WeakHashMao : 弱键(weak key)Map，Map中使用的对象也被允许释放: 这是为解决特殊问题设计的。如果没有map之外的引用指向某个“键”，则此“键”可以被垃圾收集器回收。

　　IdentifyHashMap : 使用==代替equals()对“键”作比较的hash map。专为解决特殊问题而设计。
